services:
  n5-challenge:
    build:
      context: ..
      dockerfile: N5.Challenge.API/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - sql
      - elasticsearch
      - zookeeper
      - kafka
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_Server=sql
      - ElasticSearch__Url=http://elasticsearch:9200
      - ElasticSearch__UserName=elastic
      - ElasticSearch__Password=MyElasticPass123
      - ElasticSearch__DisableCertificateValidation=true
      - Kafka__ProducerSettings__BootstrapServers=kafka:29092
      - Kafka__ConsumerSettings__BootstrapServers=kafka:29092

  # ----------------------------------------------------------------
  # 2) SQL Server
  # ----------------------------------------------------------------
  sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Test123!
    ports:
      - "1433:1433"

  # ----------------------------------------------------------------
  # 3) Elasticsearch
  # ----------------------------------------------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: elasticsearch_container
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=MyElasticPass123
    ports:
      - "9200:9200"

  # ----------------------------------------------------------------
  # 4) Zookeeper (required by Kafka)
  # ----------------------------------------------------------------
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper_container
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  # ----------------------------------------------------------------
  # 5) Kafka
  # ----------------------------------------------------------------
  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka_container
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes

    ports:
      - "9092:9092"

  # ------------------------------------------------------
  # The "init" service that creates topics after Kafka is up
  # ------------------------------------------------------
  kafka-init:
    image: bitnami/kafka:3.4
    # Switch to run in bash:
    entrypoint: ["/bin/bash", "-c"]
    command: >
      /app/wait-for-kafka.sh &&
      kafka-topics.sh --create
        --topic permissions-topic
        --partitions 1
        --replication-factor 1
        --if-not-exists
        --bootstrap-server kafka:29092
    volumes:
      - ./scripts:/app
    depends_on:
      - kafka